import React, { useState, useEffect } from 'react';
import { motion } from 'framer-motion';
import { X } from 'lucide-react';

interface AuthModalProps {
  isOpen: boolean;
  onClose: () => void;
  onCodeSubmit: (code: string) => void;
  loading?: boolean;
  invalidMessage?: string;
}

const AuthModal: React.FC<AuthModalProps> = ({
  isOpen,
  onClose,
  onCodeSubmit,
  loading = false,
  invalidMessage = ''
}) => {
  const [code, setCode] = useState(['', '', '', '', '', '']);
  const [focusedIndex, setFocusedIndex] = useState(0);

  // Reset code when modal opens
  useEffect(() => {
    if (isOpen) {
      setCode(['', '', '', '', '', '']);
      setFocusedIndex(0);
    }
  }, [isOpen]);

  // Handle input change
  const handleInputChange = (index: number, value: string) => {
    if (value.length > 1) return; // Only allow single digit
    
    const newCode = [...code];
    newCode[index] = value;
    setCode(newCode);

    // Auto focus next input
    if (value && index < 5) {
      setFocusedIndex(index + 1);
      const nextInput = document.getElementById(`code-input-${index + 1}`);
      nextInput?.focus();
    }

    // Submit when all 6 digits are filled
    if (newCode.every(digit => digit !== '') && newCode.join('').length === 6) {
      onCodeSubmit(newCode.join(''));
    }
  };

  // Handle backspace
  const handleKeyDown = (index: number, e: React.KeyboardEvent) => {
    if (e.key === 'Backspace' && !code[index] && index > 0) {
      setFocusedIndex(index - 1);
      const prevInput = document.getElementById(`code-input-${index - 1}`);
      prevInput?.focus();
    }
  };

  // Handle paste
  const handlePaste = (e: React.ClipboardEvent) => {
    e.preventDefault();
    const pastedData = e.clipboardData.getData('text').replace(/\D/g, '').slice(0, 6);
    const newCode = [...code];
    
    for (let i = 0; i < pastedData.length && i < 6; i++) {
      newCode[i] = pastedData[i];
    }
    
    setCode(newCode);
    
    if (newCode.every(digit => digit !== '')) {
      onCodeSubmit(newCode.join(''));
    }
  };

  const handleContinue = () => {
    const fullCode = code.join('');
    if (fullCode.length === 6) {
      onCodeSubmit(fullCode);
    }
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 z-50 flex items-center justify-center">
      {/* Backdrop */}
      <div 
        className="absolute inset-0 bg-black/50 backdrop-blur-sm"
        onClick={onClose}
      />
      
      {/* Modal */}
      <motion.div
        initial={{ opacity: 0, scale: 0.9, y: 20 }}
        animate={{ opacity: 1, scale: 1, y: 0 }}
        exit={{ opacity: 0, scale: 0.9, y: 20 }}
        transition={{ duration: 0.3 }}
        className="relative bg-white rounded-2xl shadow-2xl w-full max-w-md mx-4 p-8"
      >
        {/* Close button */}
        <button
          onClick={onClose}
          className="absolute top-4 right-4 p-2 text-gray-400 hover:text-gray-600 transition-colors"
        >
          <X className="w-5 h-5" />
        </button>

        {/* Header */}
        <div className="text-center mb-8">
          <h2 className="text-2xl font-bold text-gray-900 mb-2">
            Link authentication app
          </h2>
          <p className="text-gray-600 text-sm leading-relaxed">
            Enter the 6-digit code automatically generated by the<br />
            Google Authenticator app
          </p>
        </div>

        {/* Code Input Grid */}
        <div className="flex justify-center gap-3 mb-8">
          {code.map((digit, index) => (
            <input
              key={index}
              id={`code-input-${index}`}
              type="text"
              value={digit}
              onChange={(e) => handleInputChange(index, e.target.value)}
              onKeyDown={(e) => handleKeyDown(index, e)}
              onPaste={handlePaste}
              onFocus={() => setFocusedIndex(index)}
              maxLength={1}
              disabled={loading}
              className={`
                w-12 h-12 text-center text-lg font-semibold
                border-2 rounded-lg transition-all duration-200
                focus:outline-none focus:ring-2 focus:ring-blue-500
                ${
                  digit
                    ? 'border-blue-500 bg-blue-50 text-blue-900'
                    : focusedIndex === index
                    ? 'border-blue-400 bg-blue-50'
                    : 'border-gray-300 bg-white'
                }
                ${loading ? 'opacity-50 cursor-not-allowed' : ''}
              `}
            />
          ))}
        </div>

        {/* Error Message */}
        {invalidMessage && (
          <div className="mb-4 p-3 bg-red-50 border border-red-200 rounded-lg text-red-700 text-sm text-center">
            {invalidMessage}
          </div>
        )}

        {/* Continue Button */}
        <button
          onClick={handleContinue}
          disabled={code.join('').length !== 6 || loading}
          className={`
            w-full py-3 px-4 rounded-lg font-medium transition-all duration-200
            ${
              code.join('').length === 6 && !loading
                ? 'bg-blue-600 hover:bg-blue-700 text-white shadow-lg hover:shadow-xl'
                : 'bg-gray-200 text-gray-500 cursor-not-allowed'
            }
          `}
        >
          {loading ? (
            <div className="flex items-center justify-center gap-2">
              <div className="w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin" />
            </div>
          ) : (
            'Continue'
          )}
        </button>

        {/* Progress indicator */}
        <div className="mt-4 text-center text-sm text-gray-500">
          {code.filter(digit => digit !== '').length}/6 digits entered
        </div>
      </motion.div>
    </div>
  );
};

export default AuthModal;